/* 
 * Mixins
 * 
 * @package sasskit
 *
 * from here : http://web-design-weekly.com/2013/05/12/handy-sass-mixins/
 * from bootstrap
 * from Inuit.scss
 * forme https://github.com/ry5n/rem
 *
 */



// Responsive Breakpoints
@mixin at-least($point) {
  @if $point == wide {
    @media (min-width: $wide_breakpoint) { @content; }
  }
  @else if $point == large {
    @media (min-width: $large_breakpoint) { @content; }
  }
  @else if $point == medium {
    @media (min-width: $medium_breakpoint) { @content; }
  }
  @else if $point == minimal {
    @media (min-width: $minimal_breakpoint) { @content; }
  }  
}

@mixin up-to($point) {
  @if $point == wide {
    @media (max-width: $wide_breakpoint) { @content; }
  }
  @else if $point == large {
    @media (max-width: $large_breakpoint) { @content; }
  }
  @else if $point == medium {
    @media (max-width: $medium_breakpoint) { @content; }
  }
}


// Box-sizing
@mixin box-sizing($type: "border") {
  /* Acceptable values are border, content, and padding - content is the default W3C model */ 
  box-sizing: #{$type}-box;
  -webkit-box-sizing: #{$type}-box;
  -moz-box-sizing: #{$type}-box;
}


// Clearfix
@mixin clearfix() {
  clear: both;
  &:before,
  &:after{
    content: " "; 
    display: table; 
  }
  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  &{
    *zoom: 1;
  }
}


@mixin word-wrap() {
  word-break:      break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@function black($opacity) {
  @return rgba(black, $opacity)
}
@function white($opacity) {
  @return rgba(white, $opacity)
}


// Absolute positioned
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}


// Aboslute Centering
@mixin abs-centered () {
  width: 50%;
  height: 50%;
  overflow: auto;
  margin: auto;
  position: absolute;
  top: 0; left: 0; bottom: 0; right: 0;
}

// centered in viewport
@mixin abs-centered-fixed () {
  width: 50%;
  height: 50%;
  overflow: auto;
  margin: auto;
  position: fixed;
  top: 0; left: 0; bottom: 0; right: 0;
  z-index: 999;
}

@mixin abs-centered-responsive () {
  width: 60%; 
  height: 60%;
  min-width: 400px;
  max-width: 500px;
  padding: 40px;
  overflow: auto;
  margin: auto;
  position: absolute;
  top: 0; left: 0; bottom: 0; right: 0;
}




// REM Fallback
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}



// Another REM Fallback

// @private Default font-size for all browsers
$browser-default-font-size: 16px;

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;

// Whether to output fallback values in px when outputting rems.
$rem-with-px-fallback: true !default;

// Convert any CSS <length> or <percentage> value to any other.
@function convert-length($length, $to-unit, $from-context: $baseFontSize, $to-context: $from-context) {
  $from-unit: unit($length);

  // Optimize for cases where from and to may accidentally be the same.
  @if $from-unit == $to-unit { @return $length; }
  @if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
  @if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }

  // Fixed ratios
  // https://developer.mozilla.org/en/CSS/length
  // http://dev.w3.org/csswg/css3-values/#absolute-lengths
  $px-per-in: 96px / 1in;
  $px-per-mm: 96px / 25.4mm;
  $px-per-cm: 96px / 2.54cm;
  $px-per-pt: 4px / 3pt;
  $px-per-pc: 16px / 1pc;

  // Variables to store actual convesion ratios
  $px-per-from-unit: 1;
  $px-per-to-unit: 1;

  @if $from-unit != 'px' {
    @if      $from-unit == 'em'  { $px-per-from-unit: $from-context / 1em }
    @else if $from-unit == 'rem' { $px-per-from-unit: $baseFontSize / 1rem }
    @else if $from-unit == '%'   { $px-per-from-unit: $from-context / 100% }
    @else if $from-unit == 'ex'  { $px-per-from-unit: $from-context / 2ex }
    @else if $from-unit == 'in'  { $px-per-from-unit: $px-per-in }
    @else if $from-unit == 'mm'  { $px-per-from-unit: $px-per-mm }
    @else if $from-unit == 'cm'  { $px-per-from-unit: $px-per-cm }
    @else if $from-unit == 'pt'  { $px-per-from-unit: $px-per-pt }
    @else if $from-unit == 'pc'  { $px-per-from-unit: $px-per-pc }
    @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
      @warn "#{$from-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }
    @else {
      @warn "#{$from-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }

  @if $to-unit != 'px' {
    @if      $to-unit == 'em'  { $px-per-to-unit: $to-context / 1em }
    @else if $to-unit == 'rem' { $px-per-to-unit: $baseFontSize / 1rem }
    @else if $to-unit == '%'   { $px-per-to-unit: $to-context / 100% }
    @else if $to-unit == 'ex'  { $px-per-to-unit: $to-context / 2ex }
    @else if $to-unit == 'in'  { $px-per-to-unit: $px-per-in }
    @else if $to-unit == 'mm'  { $px-per-to-unit: $px-per-mm }
    @else if $to-unit == 'cm'  { $px-per-to-unit: $px-per-cm }
    @else if $to-unit == 'pt'  { $px-per-to-unit: $px-per-pt }
    @else if $to-unit == 'pc'  { $px-per-to-unit: $px-per-px }
    @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
      @warn "#{$to-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }
    @else {
      @warn "#{$to-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }
  @return $length * $px-per-from-unit / $px-per-to-unit;
}

// For the given property, use rem units with px as a fallback value for older
// browsers.
//
// $property - The css property name.
// $values - The value (or space-separated list of values) for the property.
// $use-px-fallback - Boolean, default: true; whether to use pixel fallback values
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != 'list' {
    $values: join((), $values);
  }

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem) {
      @if unit($value) == px {
        $px-values: join($px-values, round($value));
        $rem-values: join($rem-values, convert-length($value, rem));
      }
      @else {
        $px-values: join($px-values, round(convert-length($value, px)));
        $rem-values: join($rem-values, $value);
      }
    }
    @else {
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $rem-values;
}




// STYLES
// --------------------------------------------------

// Opacity

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Drop shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
       -o-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
     -moz-transition-duration: $transition-duration;
       -o-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}

// Transformations
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
     -moz-transform: skew($x, $y);
      -ms-transform: skewX($x) skewY($y); // See https://github.com/twitter/bootstrap/issues/4885
       -o-transform: skew($x, $y);
          transform: skew($x, $y);
  -webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}


// Border radius

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
   border-bottom-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}


// Placeholder text

@mixin placeholder($color: $placeholderText) {
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}


// Shadow mixin (http://codepen.io/hugo/pen/xzjGB)

@mixin shade($type, $color: #3498db, $depth: 20, $angle: 135deg, $long: false, $fade: false) {             
  $angle: ($angle - 90);             
  $x: 1.5 * cos($angle) + 0px;  
  $y: 1.5 * sin($angle) + 0px;  
  $darken: (lightness($color)/$depth)/2;
  $opacify: 0; 
  $shadow: ();  
            
  @if $long == true{              
    $darken:0;
  }  
            
  @if $fade == true {
    $opacify: (opacity($color)/$depth) ;
    // added this for rendering in some browsers, remove if you like.
    @include translateZ(0); // requires Compass
  }
            
  @for $i from 1 through $depth {
    $shadow: $shadow, $i*$x $i*$y 0 hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));     
  }       
  #{$type}-shadow: $shadow;
}


// Webkit-style focus

@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// IE7 inline-block
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}


// Retina Images mixin
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

 
/**
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}


